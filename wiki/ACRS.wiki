#summary Automatic classless route summarization

= Introduction =

The source here includes an IP address library, the AcrsRoute4 library for IPv4 summarization, and a demonstration command line program that uses the library. The code is written in C++.

The algorithm ACRS uses is very simple. It operates on sorted lists of routes consisting of, at least, a network address, a prefix length, and a metric.

For any two routes in the list to be summarized, their metrics must match, their prefix lengths must match, and the following condition must be true: The broadcast address of the lower route, plus one, must be equal to the network address of the higher route.

If the three above conditions are met, the two routes can be summarized by discarding the higher route and decreasing the lower route's metric by 1. Using recursion, this process will summarize all routes within the list as much as possible without using addresses NOT specified by at least one route. For example, ACRS can summarize 192.168.16.0/25 and 192.168.16.128/25 into 192.168.16.0/24, but an administrator might know that it's safe to summarize these routes all the way down to 192.168.0.0/16. Since this information is not presented to ACRS, it has no way to account for such situations.

There are a few other caveats dealt with by the library to make some edge conditions come out right:

  # The address added to the route list is not assumed to be a network address, necessarily. The network ID is requested from the bundled IP address class. For example, if you specify 192.168.1.5/24, or any other address in the 192.168.1.0/24 range, this is fine; the network ID is used, not the IP address specified.
  # Two networks cannot be summarized if the lower network is an odd number. This occurs with host routes. For example, 1.1.1.7/32 and 1.1.1.8/32 will not be summarized with each other, since doing so would not produce a valid network ID (1.1.1.7/31).
  # Lists of routes must be sorted in the following manner:
    # Primary sort by metric (sort order doesn't matter)
    # Secondary by prefix length in descending order
    # Tertiary sort by network address in ascending order

= Why use it? =

Almost any network that is large enough to _need_ summarization already has someone that thought out its design well enough to provide a good set of summary routes; if not, having automatically summarized routes is probably the least of the network's problems.

Practically, I see ACRS mainly as a tool for the networker's toolkit. If you have a large number of unsorted single IPs and you want to get an idea of their range, ACRS can treat them like host routes and summarize chunks of them as far as possible.

One possible use for ACRS would be in routing protocol for networks where manual summarization is simply impossible, like randomly dispersed sensor networks or MANETs. Clusters of nodes must be able to form into a hierarchy, then two clusters can advertise summary routes to each other rather than a route for every network.

Using ACRS sacrifices some processing power for less memory usage (routing tables), so that is another consideration. The method used for summarization can almost certainly be improved on to reduce processing.

= Obtaining and Building =

The general process:
  # Install subversion
  # Install a C++ compiler
  # Download the code from googlecode using subversion
  # Compile the code
  # Run the demo program

For a Debian-based system:

{{{
sudo apt-get install subversion g++
svn checkout http://acrs.googlecode.com/svn/trunk/ acrs-read-only
cd acrs-read-only
g++ -o acrs-demo acrs.cpp acrs-demo.cpp ip4addr.cpp
./acrs-demo
}}}

= Using the demo =

After compiling, try this with the demo:

{{{
./acrs-demo 10.0.0.0/26 10.0.0.64/26 10.0.0.128/25
}}}

It should output 10.0.0.0/24. Try some other routes. Currently, the demo will not let you specify a metric; it sets the metric of each route to 0 before ACRS summarizes the routes.

These networks will not be summarized:

{{{
./acrs-demo 1.1.1.7/32 1.1.1.8/32
}}}

Why? Because 1.1.1.7/31 is not a valid network ID. There is a check in the code that the lowest subnet must be even for summarization to occur. The following will work, however:

{{{
./acrs-demo 1.1.1.7/32 1.1.1.8/32 1.1.1.6/32 1.1.1.9/32
}}}

This works because 6/32 and 7/32 are summarized into 6/31, 8/32 and 9/32 are summarized into 8/31, then 6/31 and 8/31 are summarized into 6/30.

= Partial TODO =

  # It seems more natural for ACRS to be a container
  # Validation being done in the acrs-demo should be handled within acrs. This will be easier when acrs is a container.
  # Remove overlapping address space from summarized routes. For example, a list with 192.168.0.0/16 and 192.168.1.0/24 will return the routes as-is, without summarizing into 192.168.0.0/16. This should handle cases where the same exact route is entered twice.
  # Code is currently written with the goal of being close-to-usable in a C program. Would be nice to make the code fully usable in both C and C++ programs. If C++ specific, it would be nice to make use of overloaded get*() functions so we don't have to pass a null pointer to retrieve an address as an integer.
  # Make sure IP address library in use handles different endianness?